generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  score        Int       @default(1200)
  name         String?
  image        String?
  emailVerified     DateTime?
  email        String    @unique
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  whiteGames   Game[]    @relation("WhitePlayerGames")
  blackGames   Game[]    @relation("BlackPlayerGames")
  wonGames     Game[]    @relation("GameWinner")
  accounts     Account[]
  moves        Move[]
  messages     Message[]

  Session Session[]
}

model Account {
  id                 Int       @id @default(autoincrement())
  name               String?
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user   User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}
model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  user   User @relation(fields: [userId], references: [id])
}
model Game {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  whitePlayerId  Int
  blackPlayerId  Int
  winnerId       Int?
  whitePlayer    User         @relation("WhitePlayerGames", fields: [whitePlayerId], references: [id])
  blackPlayer    User         @relation("BlackPlayerGames", fields: [blackPlayerId], references: [id])
  winner         User?        @relation("GameWinner", fields: [winnerId], references: [id])
  moves          Move[]
  messages       Message[]
  history        GameHistory[]
  status         GameStatus
}

model Move {
  id        Int      @id @default(autoincrement())
  gameId    Int
  playerId  Int
  from      String
  to        String
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  player    User     @relation(fields: [playerId], references: [id])

  GameHistory GameHistory[]
}

model Message {
  id        Int      @id @default(autoincrement())
  gameId    Int
  playerId  Int
  content   String
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  player    User     @relation(fields: [playerId], references: [id])
}

model GameHistory {
  id        Int      @id @default(autoincrement())
  gameId    Int
  moveId    Int
  boardState String  // Store the board state as a JSON string or another format
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  move      Move     @relation(fields: [moveId], references: [id])
}

enum GameStatus {
  PENDING
  ONGOING
  COMPLETED
  DRAW
  WHITE_WINS
  BLACK_WINS
}
